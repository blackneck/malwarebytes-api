"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const server_1 = require("../server");
const Product_1 = require("../models/Product");
const router = express_1.Router({ mergeParams: true });
const getProducts = (req, res) => {
    Product_1.Product.find((err, allProducts) => {
        res.json(allProducts);
    });
};
const createProduct = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    const product = req.body;
    const result = yield Product_1.Product.create(product);
    res.json(result);
});
const updateProduct = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const session = yield Product_1.Product.startSession();
        yield session.withTransaction(() => __awaiter(void 0, void 0, void 0, function* () {
            const product = yield Product_1.Product.findOne({
                _id: req.params.productId,
            }).session(session);
            product.quantity += req.body.delta;
            const updatedProduct = yield product.save();
            yield session.commitTransaction();
            session.endSession();
            const { name, _id } = updatedProduct;
            server_1.socketIO.emit("productUpdated", {
                name,
                _id,
                delta: req.body.delta,
            });
            res.json(updatedProduct);
        }));
    }
    catch (e) {
        res.status(403).json(e);
    }
});
router.get("/", getProducts);
router.post("/", createProduct);
router.patch("/:productId", updateProduct);
exports.default = router;
//# sourceMappingURL=products.js.map