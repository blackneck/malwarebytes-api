import { Response, Request, Router } from "express";
import { socketIO } from "../server";

import { Product } from "../models/Product";
import { cartIdCookie } from "../constants";

const router: Router = Router({ mergeParams: true });

const getProducts = (req: Request, res: Response) => {
  Product.find((err, allProducts) => {
    const transformedProducts = allProducts.reduce(
      (transformed, product) => ({
        ...transformed,
        [product._id]: product,
      }),
      {}
    );
    res.json(transformedProducts);
  });
};

const updateProduct = async (req: Request, res: Response) => {
  try {
    const session = await Product.startSession();
    await session.withTransaction(async () => {
      const product = await Product.findOne({
        _id: req.params.productId,
      }).session(session);

      product.quantity += req.body.delta;

      const updatedProduct = await product.save();

      await session.commitTransaction();
      session.endSession();

      const allSockets = await socketIO.allSockets();
      allSockets.forEach((socketId) => {
        if (socketId !== req.body.socketId)
          socketIO.to(socketId).emit("productUpdated", {
            id: updatedProduct.id,
            delta: req.body.delta,
            cartId: req.cookies[cartIdCookie],
          });
      });

      res.json(updatedProduct);
    });
  } catch (e) {
    res.status(403).json(e);
  }
};

router.get("/", getProducts);
router.patch("/:productId", updateProduct);

export default router;
